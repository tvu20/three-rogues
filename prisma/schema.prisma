// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// user information 

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?@unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  characters    Character[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// character

model Character {
  id              String     @default(uuid()) @id
  createdAt       DateTime @default(now())
  name            String   
  author          User?@relation(fields:[authorId], references:[id])
  authorId        String? 
  avatar          String?
  race            String
  level           Int
  pronouns        String?
  background      String
  alignment       String
  age             String
  class           Json
  abilityScores   Json?
  maxHP           Int?
  proficiencyBonus  Int? 
  initiative      Int?
  ac              Json? 
  speed           Json?
  darkvision      Int?
  savingThrows    Json?
  defenses        String?
  attacksPerAction    Int?
  spellcaster     Boolean?
  castingAbility    String?
  spellsKnown     Int?
  cantripsKnown   Int?
  maxPrepared     Int?
  spellcastingFocus      String?
  armorProficiencies       String?
  weaponProficiencies      String?
  toolProficiencies       String?
  languagesKnown        String?

  liveStats       Json?
  skills          Json?
  features        Feature[]
  weapons         Weapon[]
  spells          Spell[]
}

model Feature {
  id        String    @id @default(cuid())
  createdAt       DateTime @default(now())
  character    Character?   @relation(fields: [characterId], references: [id])
  characterId  String?
  name      String
  level     Int?
  linkedAbility    String?
  description       String
  source      String
  class       String?
  options     Json?
  tracked     Boolean
  max         Int?
  used        Int?
  resetsOn    String?
  shortDescription      String?
}

model Weapon {
  id        String    @id @default(cuid())
  createdAt       DateTime @default(now())
  character    Character?   @relation(fields: [characterId], references: [id])
  characterId  String?
  name          String
  description   String?
  linkedAbility     String?
  range         String?
  ability       String?
  proficient    Boolean?
  damage        String
  damageType    String?
  hitBonus      Int?
  properties    String?
  equipped      Boolean?
  inInventory   Boolean?           
}

model Spell {
  id        String    @id @default(cuid())
  createdAt       DateTime @default(now())
  character    Character?   @relation(fields: [characterId], references: [id])
  characterId  String?
  name      String
  source    String 
  type      String
  level     String
  school    String
  components      String
  castingTime     String
  range     String
  duration    String
  ritual      Boolean?
  concentration     Boolean
  prepared      Boolean?
  description     String
  damage      String?
  save        String?
}